extends layout

block content

    script(src='/javascripts/jquery-1.10.0.min.js')

    script(src='/javascripts/datgui/dat.gui.min.js')

    script(src='/javascripts/ThreeJS/three.js')
    script(src='/javascripts/ThreeJS/OBJLoader.js')  
    script(src='/javascripts/ThreeJS/Detector.js')
    script(src='/javascripts/ThreeJS/OrbitControls.js')
    script(src='/javascripts/ThreeJS/TrackballControls.js')
    script(src='/javascripts/ThreeJS/stats.min.js')
    

    script(type="x-shader/x-vertex")#vertShader.
        uniform vec3 udirLightPos;
        varying vec3 n;
        varying vec3 l;
        varying vec3 v;


        void main()
        {
            vec3 pos = position;
            vec4 mvPos = modelViewMatrix * vec4(pos, 1.0);
            n = normal;
            l = udirLightPos;
            v = cameraPosition - position;
            gl_Position = projectionMatrix * mvPos;        

        }


    script(type="x-shader/x-vertex")#fragShader.
        #ifdef GL_ES
        
        precision highp float;

        #endif
        uniform float uFresnelExponent;
        uniform float uFresnelIntensity;
        uniform float uSpecularExponent;
        uniform vec3 uFresnelColor;
        uniform vec3 uDiffuseColor;
        uniform vec3 uSpecularColor;
        varying vec3 n;
        varying vec3 l;
        varying vec3 v;
        

        void main(void)
        {
            
            // normalizing all vectors per pixel (Per Pixel Lighting);
            vec3 N = normalize(n);
            vec3 L = normalize(l);
            vec3 V = normalize(v);

            // Half-Lambertian Term
            float Lambert = max(0.0, pow((dot(N, L) * 0.5) + 0.5, 2.0));
            //float Lambert = max(0.0, dot(N, L));
            
            // Reflect Vector
            vec3 R = -reflect(L, N);
            float rDotv = max(0.0, dot(R, V));
            vec3 Specular =  pow(rDotv, uSpecularExponent) * uSpecularColor;

            // Fresnel Term
            float Fresnel = pow((1.0 - dot(V, N)) * uFresnelIntensity, uFresnelExponent);

            // Final Color Output
            vec4 Color = vec4(uDiffuseColor, 1.0) * vec4(Lambert, Lambert, Lambert, 1.0) + vec4(Specular, 1.0) + (vec4(Fresnel, Fresnel, Fresnel, 1.0)* vec4(uFresnelColor, 1.0));
            gl_FragColor = Color;

        }

    script(src='/javascripts/ThreeJS/setup.js')

    style (type='text/css')
        body {
            overflow: hidden;
        }
        .content{
            height: 0px !important;

        }
     
    div#container3D
    div#guiContainer
    div#descContainer
        - var modelname = model.name.substring(0, model.name.indexOf('.'));
        h4= modelname
        p
            i= model.desc

    