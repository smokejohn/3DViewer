extends layout

block content

    script(src='/javascripts/jquery-1.10.0.min.js')

    script(src='/javascripts/datgui/dat.gui.min.js')

    script(src='/javascripts/ThreeJS/three.js')
    script(src='/javascripts/ThreeJS/OBJLoader.js')  
    script(src='/javascripts/ThreeJS/Detector.js')
    script(src='/javascripts/ThreeJS/OrbitControls.js')
    script(src='/javascripts/ThreeJS/TrackballControls.js')
    script(src='/javascripts/ThreeJS/stats.min.js')
    

    script(type="x-shader/x-vertex")#vertShader.
        uniform float scale;
        uniform vec3 dirLightPos;
        varying vec3 N;
        varying vec3 L;
        varying vec3 V;


        void main()
        {
            vec3 pos = position;
            vec4 mvPos = modelViewMatrix * vec4(scale * pos, 1.0);
            N = normalize(normal);
            L = normalize(dirLightPos);
            V = normalize(cameraPosition - position);
            gl_Position = projectionMatrix * mvPos;        

        }


    script(type="x-shader/x-vertex")#fragShader.
        #ifdef GL_ES
        
        precision highp float;

        #endif
        uniform float FresnelExponent;
        uniform float FresnelIntensity;
        uniform vec3 FresnelColor;
        uniform vec3 DiffuseColor;
        varying vec3 N;
        varying vec3 L;
        varying vec3 V;
        

        void main(void)
        {

            float Lambert = max(0.0, pow((dot(N, L) * 0.5) + 0.5, 2.0));
            
            
            float Fresnel = pow((1.0 - dot(V, N)) * FresnelIntensity, FresnelExponent);
            vec4 Color = vec4(DiffuseColor, 1.0) * vec4(Lambert, Lambert, Lambert, 1.0) + (vec4(Fresnel, Fresnel, Fresnel, 1.0)* vec4(FresnelColor, 1.0));
            gl_FragColor = Color;

        }

    script(src='/javascripts/ThreeJS/setup.js')

    style (type='text/css')
        body {
            overflow: hidden;
        }
     
    div#container3D
    div#guiContainer
    